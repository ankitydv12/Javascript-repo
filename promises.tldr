{
	"tldrawFileFormatVersion": 1,
	"schema": {
		"schemaVersion": 2,
		"sequences": {
			"com.tldraw.store": 4,
			"com.tldraw.asset": 1,
			"com.tldraw.camera": 1,
			"com.tldraw.document": 2,
			"com.tldraw.instance": 25,
			"com.tldraw.instance_page_state": 5,
			"com.tldraw.page": 1,
			"com.tldraw.instance_presence": 6,
			"com.tldraw.pointer": 1,
			"com.tldraw.shape": 4,
			"com.tldraw.asset.bookmark": 2,
			"com.tldraw.asset.image": 5,
			"com.tldraw.asset.video": 5,
			"com.tldraw.shape.group": 0,
			"com.tldraw.shape.text": 3,
			"com.tldraw.shape.bookmark": 2,
			"com.tldraw.shape.draw": 2,
			"com.tldraw.shape.geo": 10,
			"com.tldraw.shape.note": 9,
			"com.tldraw.shape.line": 5,
			"com.tldraw.shape.frame": 1,
			"com.tldraw.shape.arrow": 6,
			"com.tldraw.shape.highlight": 1,
			"com.tldraw.shape.embed": 4,
			"com.tldraw.shape.image": 5,
			"com.tldraw.shape.video": 4,
			"com.tldraw.binding.arrow": 1
		}
	},
	"records": [
		{
			"id": "pointer:pointer",
			"typeName": "pointer",
			"x": 842.4483807575198,
			"y": -203.9600607961661,
			"lastActivityTimestamp": 1750394142785,
			"meta": {}
		},
		{
			"x": 8.197854329297115,
			"y": 1493.2066061732105,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:BTCV_49qE8ihIKLjj2bFk",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 2062.0703125,
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							}
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "A "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "finally"
												},
												{
													"type": "text",
													"text": " handler doesn’t get the outcome of the previous handler (it has no arguments). This outcome is passed through instead, to the next suitable handler."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "If a "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "finally"
												},
												{
													"type": "text",
													"text": " handler returns something, it’s ignored."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "When "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "finally"
												},
												{
													"type": "text",
													"text": " throws an error, then the execution goes to the nearest error handler."
												}
											]
										}
									]
								}
							]
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "a62jA",
			"typeName": "shape"
		},
		{
			"x": 49.44838075751977,
			"y": 1990.4445071455768,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:VB_r_EI_OBA-M6O7we9oj",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 717.5,
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							}
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "const promisefive = new Promise(function(resolve,reject){"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "    setInterval(function(){"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "let error = true;"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "if(!error)"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "resolve({username:\"chai\",email:\"chai#"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "link",
											"attrs": {
												"href": "http://example.com",
												"target": "_blank",
												"rel": "noopener noreferrer nofollow",
												"class": null
											}
										}
									],
									"text": "example.com"
								},
								{
									"type": "text",
									"text": "\"})"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "else"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "reject({error:\"Something went wrong\"})"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "    },1000)"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "})"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "hardBreak"
								},
								{
									"type": "hardBreak"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "async function consumePromiseFive(params) {"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "try {"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "const response = await promisefive"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "console.log(response)"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "    } catch (error) {"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "console.log(error);"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "    } "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "}"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "consumePromiseFive()"
								}
							]
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "a81FD",
			"typeName": "shape"
		},
		{
			"x": 375,
			"y": -13.30078125,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:lwIUPdCX7m8OZog4Zb4pP",
			"type": "text",
			"props": {
				"color": "red",
				"size": "l",
				"w": 173.4453125,
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "Promises"
								}
							]
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "a1",
			"typeName": "shape"
		},
		{
			"x": 65.55161924248023,
			"y": 307.9600607961661,
			"z": 1,
			"meta": {},
			"id": "camera:page:page",
			"typeName": "camera"
		},
		{
			"x": 15.5,
			"y": 91.80078125,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:uJzAvfirn4VWsMXcdE6xd",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1378.125,
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "JavaScript Promises make handling asynchronous operations like API calls, file loading, or time delays easier. "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "Think of a Promise as a placeholder for a value that will be available in the future."
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "It can be in one of three states"
								}
							]
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "Pending:"
												},
												{
													"type": "text",
													"text": " The task is in the initial state."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "Fulfilled: "
												},
												{
													"type": "text",
													"text": "The task was completed successfully, and the result is available."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "bold"
														}
													],
													"text": "Rejected:"
												},
												{
													"type": "text",
													"text": " The task failed, and an error is provided."
												}
											]
										}
									]
								}
							]
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "a22s1",
			"typeName": "shape"
		},
		{
			"editingShapeId": null,
			"croppingShapeId": null,
			"selectedShapeIds": [
				"shape:lwIUPdCX7m8OZog4Zb4pP"
			],
			"hoveredShapeId": null,
			"erasingShapeIds": [],
			"hintingShapeIds": [],
			"focusedGroupId": null,
			"meta": {},
			"id": "instance_page_state:page:page",
			"pageId": "page:page",
			"typeName": "instance_page_state"
		},
		{
			"x": -27.072620391845703,
			"y": 327.2368428707123,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:Oe-OSpNRAx9borE5CDhMv",
			"type": "line",
			"props": {
				"dash": "draw",
				"size": "m",
				"color": "black",
				"spline": "line",
				"points": {
					"a1": {
						"id": "a1",
						"index": "a1",
						"x": 0,
						"y": 0
					},
					"a2ALP": {
						"id": "a2ALP",
						"index": "a2ALP",
						"x": 1183.5,
						"y": 2.5
					}
				},
				"scale": 1
			},
			"parentId": "page:page",
			"index": "a3Bff",
			"typeName": "shape"
		},
		{
			"x": 43.197854329297115,
			"y": 1643.4058249232105,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:kEOmJIEZc9nYwB3gaRhPN",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1403.625,
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "new"
								},
								{
									"type": "text",
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "Promise((resolve, reject)"
								},
								{
									"type": "text",
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "=>"
								},
								{
									"type": "text",
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "{"
								},
								{
									"type": "text",
									"text": "   "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "/* do something that takes time, and then call resolve or maybe reject */"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "})"
								},
								{
									"type": "text",
									"text": " "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "italic"
										}
									],
									"text": "  "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										},
										{
											"type": "italic"
										}
									],
									"text": "// runs when the promise is settled, doesn't matter successfully or not"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "italic"
										}
									],
									"text": "   "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										},
										{
											"type": "italic"
										}
									],
									"text": ".finally(()"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "italic"
										}
									],
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										},
										{
											"type": "italic"
										}
									],
									"text": "=>"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "italic"
										}
									],
									"text": " stop loading indicator"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										},
										{
											"type": "italic"
										}
									],
									"text": ")"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "italic"
										}
									],
									"text": "   "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										},
										{
											"type": "italic"
										}
									],
									"text": "// so the loading indicator is always stopped before we go on"
								},
								{
									"type": "text",
									"text": " "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": ".then(result"
								},
								{
									"type": "text",
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "=>"
								},
								{
									"type": "text",
									"text": " show result"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": ","
								},
								{
									"type": "text",
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "err"
								},
								{
									"type": "text",
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "=>"
								},
								{
									"type": "text",
									"text": " show error"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": ")"
								}
							]
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "a7CNS",
			"typeName": "shape"
		},
		{
			"x": 11.332353770571842,
			"y": 351.6571493596455,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:-yoHsJm0vRrpKFIFAl_2Z",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 950.838489175165,
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 0.8398532009413872,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "Syntax:"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										},
										{
											"type": "code"
										}
									],
									"text": "\tlet"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": " promise "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										},
										{
											"type": "code"
										}
									],
									"text": "="
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										},
										{
											"type": "code"
										}
									],
									"text": "new"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										},
										{
											"type": "code"
										}
									],
									"text": "Promise(function(resolve, reject)"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										},
										{
											"type": "code"
										}
									],
									"text": "{"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": "   "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										},
										{
											"type": "code"
										}
									],
									"text": "\t// executor (the producing code, \"singer\")"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": " "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										},
										{
											"type": "code"
										}
									],
									"text": "});"
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "bold"
										}
									],
									"text": " "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "Example of Promise:"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\tconst promise_one = new Promise(resolve,reject)"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\t{"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\t\tsetTimeout(()=>{resolve(\"Done\")})"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\t}"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\tNote: Promise is created but not consumed."
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\t"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "The function passed to "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "new Promise"
								},
								{
									"type": "text",
									"text": " is called the "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "italic"
										}
									],
									"text": "executor"
								},
								{
									"type": "text",
									"text": "."
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "When "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "new Promise"
								},
								{
									"type": "text",
									"text": " is created, the executor runs automatically."
								}
							]
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "resolve(value)"
												},
												{
													"type": "text",
													"text": " — if the job is finished successfully, with result "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "value"
												},
												{
													"type": "text",
													"text": "."
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "reject(error)"
												},
												{
													"type": "text",
													"text": " — if an error has occurred, "
												},
												{
													"type": "text",
													"marks": [
														{
															"type": "code"
														}
													],
													"text": "error"
												},
												{
													"type": "text",
													"text": " is the error object."
												}
											]
										}
									]
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "The Promise has two internal property and These can not be acces by user or programmer"
								}
							]
						},
						{
							"type": "bulletList",
							"content": [
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "State "
												}
											]
										}
									]
								},
								{
									"type": "listItem",
									"content": [
										{
											"type": "paragraph",
											"attrs": {
												"dir": "auto"
											},
											"content": [
												{
													"type": "text",
													"text": "result"
												}
											]
										}
									]
								}
							]
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "a45Ue",
			"typeName": "shape"
		},
		{
			"x": -8.302145670702885,
			"y": 847.0908184286884,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:DpQjnaPIMi88w1TiJHfZz",
			"type": "text",
			"props": {
				"color": "black",
				"size": "m",
				"w": 1591.625,
				"font": "draw",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "heading",
							"attrs": {
								"dir": "auto",
								"level": 2
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "link",
											"attrs": {
												"href": "https://javascript.info/promise-basics#consumers-then-catch",
												"target": "_blank",
												"rel": "noopener noreferrer nofollow",
												"class": "main__anchor"
											}
										}
									],
									"text": "Consumers: then, catch"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "A Promise object serves as a link between the executor and the consuming functions , "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "which will receive the result or error. Consuming functions can be registered (subscribed) using the methods "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": ".then"
								},
								{
									"type": "text",
									"text": " and "
								},
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": ".catch"
								},
								{
									"type": "text",
									"text": "."
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							}
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": ".then() and .catch() method is used to consume the promisses "
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "Example:"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\tconst promise_one = new Promise(resolve,reject)"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\t{"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\t\tsetTimeout(()=>{resolve(\"Done\")})"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\t}.then(function(resolve)=>{console.log(\"all_done\")})"
								}
							]
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							}
						},
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "\t"
								}
							]
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "a5768",
			"typeName": "shape"
		},
		{
			"x": 118.94838075751977,
			"y": 1913.254532599144,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:MgSMyeRhlnaW0XE4hxHtR",
			"type": "text",
			"props": {
				"color": "red",
				"size": "l",
				"w": 760.4609375,
				"font": "serif",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"text": "Consuming of promise using asyn and await"
								}
							]
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "a9ATG",
			"typeName": "shape"
		},
		{
			"meta": {},
			"id": "page:page",
			"name": "Page 1",
			"index": "a1",
			"typeName": "page"
		},
		{
			"gridSize": 10,
			"name": "",
			"meta": {},
			"id": "document:document",
			"typeName": "document"
		},
		{
			"followingUserId": null,
			"opacityForNextShape": 1,
			"stylesForNextShape": {
				"tldraw:color": "red",
				"tldraw:size": "l",
				"tldraw:fill": "solid",
				"tldraw:dash": "dashed",
				"tldraw:font": "serif"
			},
			"brush": null,
			"scribbles": [],
			"cursor": {
				"type": "default",
				"rotation": 0
			},
			"isFocusMode": false,
			"exportBackground": true,
			"isDebugMode": false,
			"isToolLocked": false,
			"screenBounds": {
				"x": 0,
				"y": 0,
				"w": 1222,
				"h": 532
			},
			"insets": [
				false,
				false,
				true,
				false
			],
			"zoomBrush": null,
			"isGridMode": false,
			"isPenMode": false,
			"chatMessage": "",
			"isChatting": false,
			"highlightedUserIds": [],
			"isFocused": true,
			"devicePixelRatio": 2,
			"isCoarsePointer": false,
			"isHoveringCanvas": true,
			"openMenus": [],
			"isChangingStyle": false,
			"isReadonly": false,
			"meta": {},
			"duplicateProps": null,
			"id": "instance:instance",
			"currentPageId": "page:page",
			"typeName": "instance"
		},
		{
			"x": 374.94838075751977,
			"y": 1311.239157953834,
			"rotation": 0,
			"isLocked": false,
			"opacity": 1,
			"meta": {},
			"id": "shape:GFzhs_hFSBR_zIt6OuZiO",
			"type": "text",
			"props": {
				"color": "red",
				"size": "l",
				"w": 152.203125,
				"font": "serif",
				"textAlign": "start",
				"autoSize": true,
				"scale": 1,
				"richText": {
					"type": "doc",
					"content": [
						{
							"type": "paragraph",
							"attrs": {
								"dir": "auto"
							},
							"content": [
								{
									"type": "text",
									"marks": [
										{
											"type": "code"
										}
									],
									"text": "Finally"
								}
							]
						}
					]
				}
			},
			"parentId": "page:page",
			"index": "aA2PR",
			"typeName": "shape"
		}
	]
}